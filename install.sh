#!/usr/bin/env bash

# Dinh Hung's Dotfiles - Refactored Version  
# Script c√†i ƒë·∫∑t v√† backup dotfiles an to√†n, r√µ r√†ng, d·ªÖ m·ªü r·ªông

set -eo pipefail

# ===== CONFIGURATION =====
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
DOTFILES_DIR="${DOTFILES_DIR:-$HOME/dotfiles}"
readonly REPO_URL="https://github.com/al0xd/dotfiles.git"

# ƒê·ªãnh nghƒ©a dotfiles mapping - t∆∞∆°ng th√≠ch v·ªõi bash c≈© (macOS default)
# Format: "source_path|destination_path"
readonly DOTFILE_MAPPINGS=(
  "zsh/zshrc|$HOME/.zshrc"
  "git/gitconfig|$HOME/.gitconfig"
  "git/gitignore|$HOME/.gitignore"
  "lunarvim/config.lua|$HOME/.config/lvim/config.lua"
  "kitty/kitty.conf|$HOME/.config/kitty/kitty.conf"
)

# ===== LOGGING FUNCTIONS =====
log_info() {
  echo "‚ÑπÔ∏è  $*"
}

log_success() {
  echo "‚úÖ $*"
}

log_warn() {
  echo "‚ö†Ô∏è  $*"
}

log_error() {
  echo "‚ùå $*" >&2
}

# ===== UTILITY FUNCTIONS =====
# Ki·ªÉm tra v√† t·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
ensure_directory() {
  local dir="$1"
  if [[ ! -d "$dir" ]]; then
    log_info "T·∫°o th∆∞ m·ª•c: $dir"
    mkdir -p "$dir"
  fi
}

# Backup file v·ªõi timestamp n·∫øu c·∫ßn thi·∫øt
backup_file() {
  local file="$1"
  
  # B·ªè qua n·∫øu file kh√¥ng t·ªìn t·∫°i
  [[ ! -e "$file" && ! -L "$file" ]] && return 0
  
  local backup_file="${file}.backup"
  
  # N·∫øu backup ƒë√£ t·ªìn t·∫°i, th√™m timestamp
  if [[ -e "$backup_file" ]]; then
    backup_file="${file}.backup.$(date +%Y%m%d_%H%M%S)"
  fi
  
  log_info "Backup: $file -> $backup_file"
  mv "$file" "$backup_file"
}

# T·∫°o symlink an to√†n v·ªõi validation
create_symlink() {
  local src="$1"
  local dest="$2"
  
  # Ki·ªÉm tra source file c√≥ t·ªìn t·∫°i
  if [[ ! -e "$src" ]]; then
    log_warn "Source kh√¥ng t·ªìn t·∫°i: $src (b·ªè qua)"
    return 0
  fi
  
  # T·∫°o th∆∞ m·ª•c ƒë√≠ch n·∫øu ch∆∞a c√≥
  ensure_directory "$(dirname "$dest")"
  
  # X√≥a file/symlink c≈© n·∫øu c√≥
  [[ -e "$dest" || -L "$dest" ]] && rm -f "$dest"
  
  # T·∫°o symlink
  ln -s "$src" "$dest"
  log_success "Linked: $src -> $dest"
}

# ===== MAIN FUNCTIONS =====
# C√†i ƒë·∫∑t/c·∫≠p nh·∫≠t dotfiles
install_dotfiles() {
  log_info "=== B·∫Øt ƒë·∫ßu c√†i ƒë·∫∑t dotfiles ==="
  
  # Backup v√† t·∫°o symlink cho t·∫•t c·∫£ configs
  for mapping in "${DOTFILE_MAPPINGS[@]}"; do
    # Split string by pipe delimiter
    local src="${mapping%|*}"
    local dest="${mapping#*|}"
    
    # Backup file c≈© tr∆∞·ªõc
    backup_file "$dest"
    
    # T·∫°o symlink
    local full_src="$DOTFILES_DIR/$src"
    create_symlink "$full_src" "$dest"
  done
  
  log_success "Dotfiles ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng!"
}

# Kh·ªüi t·∫°o repository dotfiles
setup_repository() {
  if [[ ! -d "$DOTFILES_DIR" ]]; then
    log_info "Clone dotfiles repository l·∫ßn ƒë·∫ßu..."
    git clone --depth=1 "$REPO_URL" "$DOTFILES_DIR"
    log_success "Repository ƒë√£ ƒë∆∞·ª£c clone th√†nh c√¥ng!"
  else
    log_info "Repository ƒë√£ t·ªìn t·∫°i, c·∫≠p nh·∫≠t..."
    cd "$DOTFILES_DIR"
    
    # Pull updates n·∫øu c√≥ th·ªÉ
    if git rev-parse --git-dir > /dev/null 2>&1; then
      log_info "C·∫≠p nh·∫≠t t·ª´ remote repository..."
      git pull origin master || log_warn "Kh√¥ng th·ªÉ pull updates"
    fi
  fi
}

# Validate environment v√† dependencies
validate_environment() {
  # Ki·ªÉm tra git c√≥ s·∫µn
  if ! command -v git &> /dev/null; then
    log_error "Git kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y. Vui l√≤ng c√†i ƒë·∫∑t Git tr∆∞·ªõc."
    exit 1
  fi
  
  # Ki·ªÉm tra quy·ªÅn ghi v√†o HOME
  if [[ ! -w "$HOME" ]]; then
    log_error "Kh√¥ng c√≥ quy·ªÅn ghi v√†o th∆∞ m·ª•c HOME: $HOME"
    exit 1
  fi
}

# Hi·ªÉn th·ªã help
show_help() {
  cat << EOF
Dotfiles Installer - C√†i ƒë·∫∑t c·∫•u h√¨nh dotfiles

USAGE:
  $0 [OPTIONS]

OPTIONS:
  -h, --help     Hi·ªÉn th·ªã help n√†y
  -d, --dir DIR  Ch·ªâ ƒë·ªãnh th∆∞ m·ª•c dotfiles (m·∫∑c ƒë·ªãnh: $HOME/dotfiles)

EXAMPLES:
  $0                     # C√†i ƒë·∫∑t b√¨nh th∆∞·ªùng
  $0 -d /path/to/custom  # S·ª≠ d·ª•ng th∆∞ m·ª•c custom

EOF
}

# Parse command line arguments
parse_arguments() {
  while [[ $# -gt 0 ]]; do
    case $1 in
      -h|--help)
        show_help
        exit 0
        ;;
      -d|--dir)
        DOTFILES_DIR="$2"
        shift 2
        ;;
      *)
        log_error "Unknown option: $1"
        show_help
        exit 1
        ;;
    esac
  done
}

# ===== MAIN EXECUTION =====
main() {
  parse_arguments "$@"
  
  log_info "üöÄ Kh·ªüi ƒë·ªông Dotfiles Installer..."
  log_info "Dotfiles directory: $DOTFILES_DIR"
  
  validate_environment
  setup_repository
  
  cd "$DOTFILES_DIR"
  install_dotfiles
  
  log_success "üéâ Ho√†n th√†nh! Reload shell ƒë·ªÉ √°p d·ª•ng thay ƒë·ªïi."
}

# Ch·∫°y script v·ªõi error handling
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  main "$@"
fi

