name: Release
on:
  push:
    branches:
      - master
jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      has_changes: ${{ steps.check.outputs.has_changes }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: '0'  # Lấy đầy đủ lịch sử commit
          ref: master

      - name: Get Last Semantic Release Tag
        id: last_tag
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 || echo "v0.0.0")
          echo "LAST_TAG=$LATEST_TAG" >> $GITHUB_ENV

      - name: Check for new commits from users
        id: check
        run: |
          LAST_TAG=${{ env.LAST_TAG }}
          NEW_COMMITS=$(git log $LAST_TAG..HEAD --pretty=format:"%h %an" | grep -v "Semantic Release Bot" | wc -l)
          
          if [[ $NEW_COMMITS -gt 0 ]]; then
            echo "✅ Có $NEW_COMMITS commit mới từ người dùng. Tiến hành release!"
            echo "has_changes=true" >> $GITHUB_ENV
            echo "::set-output name=has_changes::true"
          else
            echo "❌ Không có commit mới từ người dùng. Bỏ qua release!"
            echo "has_changes=false" >> $GITHUB_ENV
            echo "::set-output name=has_changes::false"
          fi

  release:
    name: Semantic Release with FC-Commits
    needs: check-changes
    if: needs.check-changes.outputs.has_changes == 'true'  # Chỉ chạy nếu có commit từ người dùng
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  

      - name: Generate New Tag Version
        id: new_tag
        run: |
          NEW_VERSION=$(npx semantic-release --dry-run | grep -oP 'next release version is \K[0-9]+\.[0-9]+\.[0-9]+' || echo "0.0.1")
          NEW_TAG="v$NEW_VERSION"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

      - name: Generate Changelog from All Commits (with JIRA links)
        run: |
          echo "## Changelog - $(date +%Y-%m-%d)" > CHANGELOG.md
          echo "" >> CHANGELOG.md

          LAST_TAG=${{ env.LAST_TAG }}
          echo "Fetching commits since: $LAST_TAG"

          git log $LAST_TAG..HEAD --pretty=format:"%h %s" | while read -r line; do
            COMMIT_ID=$(echo $line | awk '{print $1}')
            MESSAGE=$(echo $line | cut -d' ' -f2-)

            if [[ $MESSAGE =~ (FC-[0-9]+) ]]; then
              JIRA_KEY="${BASH_REMATCH[1]}"
              JIRA_URL="[${JIRA_KEY}](https://jira.company.com/browse/${JIRA_KEY})"
              FORMATTED_MESSAGE="${MESSAGE//$JIRA_KEY/$JIRA_URL}"
              echo "- $FORMATTED_MESSAGE ($COMMIT_ID)" >> CHANGELOG.md
            else
              echo "- $MESSAGE ($COMMIT_ID)" >> CHANGELOG.md
            fi
          done
          
          echo "" >> CHANGELOG.md
          cat CHANGELOG.md

      - name: Commit & Push Changelog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "Semantic Release Bot"
          git config --global user.email "semantic-release-bot@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "chore(release): update changelog"
          git push origin main

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Install Semantic Release
        run: npm install -g semantic-release @semantic-release/changelog @semantic-release/git @semantic-release/github

      - name: Run Semantic Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release

      - name: Create New Git Tag
        run: |
          git tag ${{ env.NEW_TAG }}
          git push origin ${{ env.NEW_TAG }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.NEW_TAG }}
          name: "Release ${{ env.NEW_TAG }}"
          body_path: CHANGELOG.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
